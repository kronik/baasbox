# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~ 

# Swagger - Root Resources Listing
# GET     /api-docs.json               controllers.ApiHelpController.getResources

# GET     /api-docs.json/admin         controllers.ApiHelpController.getResource(path = "/api-docs.json/admin")
# GET     /admin.json/health           controllers.HealthController.getHealth
# GET     /admin.json/ping             controllers.HealthController.ping

# GET     /api-docs.json/user           controllers.ApiHelpController.getResource(path = "/api-docs.json/user")

# Admin Panel Static Asset
GET 	/console						controllers.Default.redirect(to = "/console/")
GET		/console/index.html				controllers.Default.redirect(to = "/console/")
GET		/console/login.html				controllers.Default.redirect(to = "/console/")
GET 	/console/						com.baasbox.controllers.Application.login()
GET     /console/js/routes      	 	com.baasbox.controllers.AllRoutes.javascriptRoutes()
GET     /console/*file               	controllers.Assets.at(path="/public/console", file)


#Assets action
POST	/admin/asset						com.baasbox.controllers.Asset.post()
GET		/admin/asset						com.baasbox.controllers.Asset.getAll()
DELETE	/admin/asset/:name					com.baasbox.controllers.Asset.delete(name: String)
GET		/asset/:name/data					com.baasbox.controllers.Asset.get(name: String)
GET		/asset/:name/download/resize/:w/:h	com.baasbox.controllers.Asset.downloadResizedWH(name: String, download: Boolean ?= true, w: String,h: String)
GET		/asset/:name/download/resize/:perc	com.baasbox.controllers.Asset.downloadResizedInPerc(name: String, download: Boolean ?= true, perc: String)
GET		/asset/:name/download/resizeId/:sizeId		com.baasbox.controllers.Asset.downloadSizeId(name: String, download: Boolean ?= true, sizeId: Integer)
GET		/asset/:name/download				com.baasbox.controllers.Asset.download(name: String, download: Boolean ?= true)
GET		/asset/:name/resize/:w/:h			com.baasbox.controllers.Asset.downloadResizedWH(name: String, download: Boolean ?= false, w: String, h: String)
GET		/asset/:name/resize/:perc			com.baasbox.controllers.Asset.downloadResizedInPerc(name: String, download: Boolean ?= false, perc: String)
GET		/asset/:name/resizeId/:sizeId		com.baasbox.controllers.Asset.downloadSizeId(name: String, download: Boolean ?= false, sizeId: Integer)
GET		/asset/:name						com.baasbox.controllers.Asset.download(name: String, download: Boolean ?= false)
 
# User actions
POST	/user								com.baasbox.controllers.User.signUp()
POST	/login								com.baasbox.controllers.User.login()
POST	/logout/:pushToken	    			com.baasbox.controllers.User.logoutWithDevice(pushToken: String)
POST 	/logout								com.baasbox.controllers.User.logoutWithoutDevice()

GET		/social		    		    				com.baasbox.controllers.Social.socialLogins()
POST	/social/:socialNetwork						com.baasbox.controllers.Social.loginWith(socialNetwork: String)
PUT		/social/:socialNetwork						com.baasbox.controllers.Social.linkWith(socialNetwork: String)
DELETE  /social/:socialNetwork						com.baasbox.controllers.Social.unlink(socialNetwork: String)
GET		/social/login/:socialNetwork/callback		com.baasbox.controllers.Social.callback(socialNetwork: String)

#logged user
GET		/me								com.baasbox.controllers.User.getCurrentUser()
PUT		/me								com.baasbox.controllers.User.updateProfile()
PUT 	/me/suspend						com.baasbox.controllers.User.disable()
PUT		/me/password					com.baasbox.controllers.User.changePassword()


#forgotten password
GET		/user/:username/password/reset   	com.baasbox.controllers.User.resetPasswordStep1(username: String)
GET		/user/password/reset/:base64     	com.baasbox.controllers.User.resetPasswordStep2(base64: String)
POST	/user/password/reset/:base64     	com.baasbox.controllers.User.resetPasswordStep3(base64: String)

#Queries against users different by the logged one
GET 	/users								com.baasbox.controllers.User.getUsers()
GET		/user/:username						com.baasbox.controllers.User.getUser(username: String)
GET		/user/:username/exists				com.baasbox.controllers.User.exists(username: String)

#deprecated
GET		/user								com.baasbox.controllers.User.getCurrentUser()
PUT		/user								com.baasbox.controllers.User.updateProfile()
PUT 	/user/suspend						com.baasbox.controllers.User.disable()
PUT		/user/password						com.baasbox.controllers.User.changePassword()


#friendship
GET 	 /followers									com.baasbox.controllers.User.followers(justCountThem: Boolean ?= false, username: String = "")
GET 	 /followers/:username						com.baasbox.controllers.User.followers(justCountThem: Boolean ?= false, username: String)
#GET 	 /followers/count							com.baasbox.controllers.User.followers(justCountThem: Boolean ?= true)
GET      /following									com.baasbox.controllers.User.following(username: String = "")
GET      /following/:username						com.baasbox.controllers.User.following(username: String)
POST     /follow/:username                  		com.baasbox.controllers.User.follow(username: String)
DELETE   /follow/:username                  		com.baasbox.controllers.User.unfollow(username: String)
GET      /admin/following/:username					com.baasbox.controllers.Admin.following(username:String)
POST     /admin/follow/:follower/to/:theFollowed	com.baasbox.controllers.Admin.createFollowRelationship(follower:String, theFollowed:String)
DELETE   /admin/follow/:follower/to/:theFollowed	com.baasbox.controllers.Admin.removeFollowRelationship(follower:String, theFollowed:String)

# Push
POST	/push/message/:username		    com.baasbox.controllers.Push.send(username: String)
PUT 	/push/enable/:os/:pushToken     com.baasbox.controllers.Push.enablePush(os: String, pushToken: String)
PUT 	/push/disable/:pushToken        com.baasbox.controllers.Push.disablePush(pushToken: String)
#deprecated
PUT 	/push/device/:os/:deviceId      com.baasbox.controllers.Push.enablePush(os: String, deviceId: String)

#Storage Actions
GET		 /document/%23:rid							com.baasbox.controllers.Document.getDocumentByRid(rid: String)
POST	 /document/:collection	 					com.baasbox.controllers.Document.createDocument(collection: String)
GET		 /document/:collection						com.baasbox.controllers.Document.getDocuments(collection: String)
GET 	 /document/:collection/count  				com.baasbox.controllers.Document.getCount(collection: String)
PUT 	 /document/:collection/%23:rid					com.baasbox.controllers.Document.updateDocument(collection: String, rid: String, isUUID: Boolean ?= false)
GET		 /document/:collection/%23:rid					com.baasbox.controllers.Document.getDocument(collection: String, rid: String, isUUID: Boolean ?= false)
DELETE	 /document/:collection/%23:rid					com.baasbox.controllers.Document.deleteDocument(collection: String, rid: String, isUUID: Boolean ?= false)

PUT 	 /document/:collection/:uuid					com.baasbox.controllers.Document.updateDocument(collection: String, uuid: String, isUUID: Boolean ?= true)
GET		 /document/:collection/:uuid					com.baasbox.controllers.Document.getDocument(collection: String, uuid: String, isUUID: Boolean ?= true)
DELETE	 /document/:collection/:uuid					com.baasbox.controllers.Document.deleteDocument(collection: String, uuid: String, isUUID: Boolean ?= true)


GET      /document/:collection/:uuid/$parts<((/)?([.])([a-zA-Z0-9])+(\[([0-9])+\])?/?)+>  com.baasbox.controllers.Document.queryDocument(collection: String, uuid: String, isUUID: Boolean ?= true, parts: String)
PUT      /document/:collection/:uuid/$parts<((/)?([.])([a-zA-Z0-9])+(\[([0-9])+\])?/?)+>  com.baasbox.controllers.Document.updateDocumentWithParts(collection: String, uuid: String, isUUID: Boolean ?= true, parts: String)



#grant and revoke permissions on documents
PUT		/document/:collection/%23:rid/:action/user/:username		com.baasbox.controllers.Document.grantToUser(collection:String, rid:String, username:String, action:String, isUUID: Boolean ?= false)
DELETE	/document/:collection/%23:rid/:action/user/:username		com.baasbox.controllers.Document.revokeToUser(collection:String, rid:String, username:String, action:String, isUUID: Boolean ?= false)
PUT		/document/:collection/%23:rid/:action/role/:rolename		com.baasbox.controllers.Document.grantToRole(collection:String, rid:String, rolename:String, action:String, isUUID: Boolean ?= false)
DELETE	/document/:collection/%23:rid/:action/role/:rolename		com.baasbox.controllers.Document.revokeToRole(collection:String, rid:String, rolename:String, action:String, isUUID: Boolean ?= false)

PUT		/document/:collection/:uuid/:action/user/:username		com.baasbox.controllers.Document.grantToUser(collection:String, uuid:String, username:String, action:String, isUUID: Boolean ?= true)
DELETE	/document/:collection/:uuid/:action/user/:username		com.baasbox.controllers.Document.revokeToUser(collection:String, uuid:String, username:String, action:String, isUUID: Boolean ?= true)
PUT		/document/:collection/:uuid/:action/role/:rolename		com.baasbox.controllers.Document.grantToRole(collection:String, uuid:String, rolename:String, action:String, isUUID: Boolean ?= true)
DELETE	/document/:collection/:uuid/:action/role/:rolename		com.baasbox.controllers.Document.revokeToRole(collection:String, uuid:String, rolename:String, action:String, isUUID: Boolean ?= true)




#Admin actions
GET		/admin/user						com.baasbox.controllers.Admin.getUsers()
GET		/admin/user/:username			com.baasbox.controllers.Admin.getUser(username: String)
POST	/admin/user						com.baasbox.controllers.Admin.createUser()
PUT		/admin/user/:username			com.baasbox.controllers.Admin.updateUser(username: String)
PUT 	/admin/user/suspend/:username	com.baasbox.controllers.Admin.disable(username: String)
PUT 	/admin/user/activate/:username	com.baasbox.controllers.Admin.enable(username: String)
PUT		/admin/user/:username/password  com.baasbox.controllers.Admin.changePassword(username: String)
POST	/admin/collection/:name			com.baasbox.controllers.Admin.createCollection(name: String)
GET		/admin/collection				com.baasbox.controllers.Admin.getCollections()
DELETE  /admin/collection/:name			com.baasbox.controllers.Admin.dropCollection(name: String)
GET 	/admin/apiVersion				com.baasbox.controllers.Application.apiVersion()
GET 	/admin/dbStatistics				com.baasbox.controllers.Admin.getDBStatistics()	
GET		/admin/role						com.baasbox.controllers.Admin.getRoles()
GET		/admin/role/:name				com.baasbox.controllers.Admin.getRole(name: String)
POST	/admin/role/:name				com.baasbox.controllers.Admin.createRole(name: String)
PUT		/admin/role/:name				com.baasbox.controllers.Admin.editRole(name: String)
DELETE  /admin/role/:name				com.baasbox.controllers.Admin.deleteRole(name: String)

#Files
GET		 /file/details					com.baasbox.controllers.File.getAllFile()
POST 	 /file							com.baasbox.controllers.File.storeFile()
DELETE	 /file/:uuid					com.baasbox.controllers.File.deleteFile(uuid: String)
GET		 /file/details/:uuid			com.baasbox.controllers.File.getFile(uuid: String)
GET		 /file/attachedData/:uuid		com.baasbox.controllers.File.getFileAttachedData(uuid: String)
GET		 /file/content/:uuid		com.baasbox.controllers.File.getFileContent(uuid: String)

#GET		 /file/download/:uuid			com.baasbox.controllers.File.downloadFile(uuid: String)
GET		 /file/:uuid					com.baasbox.controllers.File.streamFile(uuid: String)

#grants on Files
PUT		/file/:uuid/:action/user/:username		com.baasbox.controllers.File.grantOrRevokeToUser(uuid:String, username:String, action:String, grant: Boolean ?= true)
DELETE	/file/:uuid/:action/user/:username		com.baasbox.controllers.File.grantOrRevokeToUser(uuid:String, username:String, action:String, grant: Boolean ?= false)
PUT		/file/:uuid/:action/role/:rolename		com.baasbox.controllers.File.grantOrRevokeToRole(uuid:String, rolename:String, action:String, grant: Boolean ?= true)
DELETE	/file/:uuid/:action/role/:rolename		com.baasbox.controllers.File.grantOrRevokeToRole(uuid:String, rolename:String, action:String, grant: Boolean ?= false)


#deprecated
GET		/admin/roles					com.baasbox.controllers.Admin.getRoles()
#--------------------


GET		/admin/configuration/dump.json							com.baasbox.controllers.Admin.dumpConfiguration(String ?= "json")
GET		/admin/configuration/dump.txt							com.baasbox.controllers.Admin.dumpConfiguration(String ?= "txt")
GET		/admin/configuration/:section							com.baasbox.controllers.Admin.getConfiguration(section: String)
		
PUT		/admin/configuration/:section/:subSection/:key/:value	com.baasbox.controllers.Admin.setConfiguration(section: String, subSection: String, key: String, value: String)
#DEPRECATED
PUT		/admin/configuration/:section/:key/:value				com.baasbox.controllers.Admin.setConfiguration(section: String, subSection: String ?= "", key: String, value: String)
PUT     /admin/configuration/:section/:key                      com.baasbox.controllers.Admin.setConfiguration(section: String, subSection: String ?= "", key: String, value: String ?= "")
PUT     /admin/configuration/:section                        	com.baasbox.controllers.Admin.setConfiguration(section: String, subSection: String ?= "", key: String ?= "", value: String ?= "")

GET		/admin/version/latest									com.baasbox.controllers.Admin.getLatestVersion()
DELETE	/admin/db/:timeout										com.baasbox.controllers.Admin.dropDb(timeout:Long)
POST	/admin/db/export										com.baasbox.controllers.Admin.exportDb()
GET	    /admin/db/export/:filename							    com.baasbox.controllers.Admin.getExport(filename:String)
DELETE	/admin/db/export/:filename							    com.baasbox.controllers.Admin.deleteExport(filename:String)
GET	    /admin/db/export										com.baasbox.controllers.Admin.getExports()

POST	/admin/db/import         							    com.baasbox.controllers.Admin.importDb()

# ROOT access
# ROOT RESET ADMIN PASSWORD
POST	/root/resetadminpassword								com.baasbox.controllers.Root.resetAdminPassword()
# ROOT + METRICS 
POST	/root/metrics											com.baasbox.controllers.Root.startMetrics()
DELETE 	/root/metrics											com.baasbox.controllers.Root.stopMetrics()
GET		/root/metrics/meters									com.baasbox.controllers.Root.meters()
GET		/root/metrics/counters									com.baasbox.controllers.Root.counters()
GET		/root/metrics/gauges									com.baasbox.controllers.Root.gauges()
GET		/root/metrics/timers									com.baasbox.controllers.Root.timers()
GET		/root/metrics/histograms								com.baasbox.controllers.Root.histograms()
GET		/root/metrics/uptime									com.baasbox.controllers.Root.uptime()




# Home page & general API
GET		/refresh					com.baasbox.controllers.Generic.refreshSessionToken()
GET     /                           com.baasbox.controllers.Application.index()
GET 	/*file						controllers.Assets.at(path="/public/", file)
OPTIONS /*dummy						com.baasbox.controllers.Generic.getOptions(dummy: String)
